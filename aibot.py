import logging
import os

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from environs import Env
from telegram import KeyboardButton

env = Env()
env.read_env()
TOKEN=os.environ["TG_TOKEN"]

# Configure logging
logging.basicConfig(level=logging.INFO)


# Initialize bot and dispatcher
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

class reg_states(StatesGroup):
    self_data = State()
    name = State()
    booking = State()
    saloon = State()
    service = State()
    master = State()
    schedule = State()
    date = State()
    time = State()


@dp.message_handler(commands=['start', 'help'])
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    booking_kb = types.KeyboardButton('–ó–∞–ø–∏—Å—å')
    profile_kb = types.KeyboardButton('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüë§')
    keyboard.add(booking_kb, profile_kb)
    await bot.send_message(message.chat.id,
                           text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BeautyCity, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª',
                           reply_markup=keyboard)

    await reg_states.booking.set()


@dp.message_handler(state=reg_states.booking)
async def reservation(message: types.Message):
    global booking_markup
    booking_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    booking_kb = types.KeyboardButton('–ó–∞–ø–∏—Å—å')
    profile_kb = types.KeyboardButton('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüë§')
    booking_markup.add(booking_kb, profile_kb)
    if message.text == '–ó–∞–ø–∏—Å—å':
        saloons_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        saloons = ['Vibe', 'Milane', '–ì—Ä—É—Å—Ç—å', 'Lokon', 'Vibeu'] #TODO —Ç—É—Ç –Ω–∞–¥–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å–µ —Å–∞–ª–æ–Ω—ã
        saloons_button = [types.KeyboardButton(f'{i}') for i in saloons]
        for _ in saloons_button:
            saloons_markup.add(_)
        await bot.send_message(message.chat.id,
                               f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–ª–æ–Ω:",
                               reply_markup=saloons_markup)
        await reg_states.saloon.set()

        await reg_states.service.set()

    if message.text == '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüë§':
        # TODO
        pass



@dp.message_handler(state=reg_states.service)
async def get_service(message: types.Message):
    schoosed_salon = message.text
    servises = ['–≠–ø–∏–ª—è—Ü–∏—è', '–°–æ–ª—è—Ä–∏–π', '–Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏—è —Ä–µ—Å–Ω–∏—Ü', '–ú–∞–Ω–∏–∫—é—Ä'] #TODO —Ç—É—Ç –Ω–∞–¥–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å–µ —É—Å–ª—É–≥–∏ –∏–∑ –ë–î –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∞–ª–æ–Ω–∞
    servises_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    servises_button = [types.KeyboardButton(f'{i}') for i in servises]
    for _ in servises_button:
        servises_markup.add(_)
    await bot.send_message(message.chat.id,
                           f"–í —Å–∞–ª–æ–Ω–µ {schoosed_salon} –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª—É–≥—É:",
                           reply_markup=servises_markup)

    await reg_states.master.set()


@dp.message_handler(state=reg_states.master)
async def get_master(message: types.Message):
    schoosed_salon = '' #TODO –∫–∞–∫ –¥–æ—Å—Ç–∞—Ç—å? –ø–æ—á–∏—Ç–∞—Ç—å –ø—Ä–æ FSMContext
    schoosed_service = message.text
    masters_button = ['–Æ–ª–∏—è –õ–∞—Ö–∏–Ω–∞', '–í–∏–∫—Ç–æ—Ä–∏—è –•–µ–≥–∞–π', '–ï–ª–∏–∑–∞–≤–µ—Ç–∞ –ù–µ–≤–∑–æ—Ä–æ–≤–∞'] #TODO —Ç—É—Ç –Ω–∞–¥–æ –¥–æ—Å—Ç–∞—Ç—å –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ —Å–∞–ª–æ–Ω–∞(schoosed_salon) —Å —Å–æ–æ—Ç–≤–µ—Ç. —É—Å–ª—É–≥–æ–π(schoosed_service)
    masters_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for _ in masters_button:
        masters_markup.add(_)
    await bot.send_message(message.chat.id,
                           f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:",
                           reply_markup=masters_markup)

    await reg_states.date.set()


@dp.message_handler(state=reg_states.date)
async def get_date(message: types.Message):
    schoosed_master = message.text
    schedule_button = ['16 –¥–µ–∫–∞–±—Ä—è', '17 –¥–µ–∫–∞–±—Ä—è', '18 –¥–µ–∫–∞–±—Ä—è', '19 –¥–µ–∫–∞–±—Ä—è', '20 –¥–µ–∫–∞–±—Ä—è'] #TODO –¥–æ—Å—Ç–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã —É –º–∞—Å—Ç–µ—Ä–∞
    schedule_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for _ in schedule_button:
        schedule_markup.add(_)
    await bot.send_message(message.chat.id,
                           f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É —É –º–∞—Å—Ç–µ—Ä–∞ {schoosed_master}:",
                           reply_markup=schedule_markup)

    await reg_states.time.set()


@dp.message_handler(state=reg_states.time)
async def get_time(message: types.Message):
    schoosed_master = '' #TODO –∫–∞–∫ –¥–æ—Å—Ç–∞—Ç—å? –ø–æ—á–∏—Ç–∞—Ç—å –ø—Ä–æ FSMContext
    schedule_button = ['8:00-8:40', '8:50-9:30', '9:40-10:20', '10:35-11:15', '11:25-12:05'] #TODO –¥–æ—Å—Ç–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è —É –º–∞—Å—Ç–µ—Ä–∞
    schedule_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for _ in schedule_button:
        schedule_markup.add(_)
    await bot.send_message(message.chat.id,
                           f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è —É –º–∞—Å—Ç–µ—Ä–∞ {schoosed_master}:",
                           reply_markup=schedule_markup)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)