import logging
from datetime import datetime

from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from environs import Env
import asyncio


env = Env()
env.read_env()
logging.basicConfig(level=logging.INFO)

bot_token = env.str('BOT_TOKEN', 'REPLACE_ME')
buy_token = env.str('PAYMENTS_TOKEN', 'REPLACE_ME')

bot = Bot(bot_token)
dp = Dispatcher(bot, storage=MemoryStorage())

class Visit:
    day = None
    saloon = None
    master = None
    service = None

class RegStates(StatesGroup):
    main_menu = State()
    new_visit = State()

    self_data = State()
    name = State()
    phone = State()

    personal_cab = State()

    like_dislike = State()
    rand_new_recipe = State()


def get_saloons():
    saloons = [{'id': 1, 'name': "Pleasure", 'address': "–ó–∞ —É–≥–ª–æ–º –Ω–∞ –ª–µ–≤–æ"},
               {'id': 2, 'name': "Joy", 'address': "–ó–∞ —É–≥–ª–æ–º –Ω–∞ –ª–µ–≤–æ"},
               {'id': 3, 'name': "Honey", 'address': "–ó–∞ —É–≥–ª–æ–º –Ω–∞ –ª–µ–≤–æ"}]
    return saloons


@dp.message_handler(commands=['start'])
async def start(message: types.Message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    sign_for_visit = types.KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—èüßæ")
    pers_cab_button = types.KeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüë§")
    markup.add(sign_for_visit, pers_cab_button)
    await bot.send_message(message.chat.id,
                           f"–•–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –µ—â–µ –∫—Ä–∞—Å–∏–≤–µ–µ?",
                           reply_markup=markup)
    await RegStates.main_menu.set()


@dp.message_handler(state=RegStates.main_menu)
async def main_menu(message: types.Message, state: FSMContext):
    main_menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    sign_for_visit = types.KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—èüßæ")
    pers_cab_button = types.KeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüë§")
    main_menu_markup.add(sign_for_visit, pers_cab_button)
    if message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìö":
        await bot.send_message(message.chat.id,
                               f"–•–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –µ—â–µ –∫—Ä–∞—Å–∏–≤–µ–µ?",
                               reply_markup=main_menu_markup)
    if message.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—èüßæ":
        new_visit_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)


        buttons = [types.KeyboardButton("–í —Å–∞–ª–æ–Ωüè†"),
                   types.KeyboardButton("–ù–∞ –¥–∞—Ç—ÉüìÖ"),
                   types.KeyboardButton("–ö –º–∞—Å—Ç–µ—Ä—Éüôã")]

        for i in range(500):
            buttons.append(types.KeyboardButton(str(i)))
        go_to_main_menu = types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìö")
        new_visit_markup.add(*buttons).row(go_to_main_menu)

        await bot.send_message(message.chat.id,
                                 f"–ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
                                 reply_markup=new_visit_markup)
        await RegStates.new_visit.set()


        # new_visit_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        #
        # saloons = get_saloons()
        # for saloon in saloons:
        #     print(saloon['id'])
        #
        # rand_recipe_button = types.KeyboardButton("–õ—é–±–æ–πüçΩ")
        # nongluten_recipe_button = types.KeyboardButton("–ë–µ–∑–≥–ª—é—Ç–µ–Ω–æ–≤—ã–πüç™")
        # vegetarian_recipe_button = types.KeyboardButton("–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–πü•ó")
        # nonlactose_recipe_button = types.KeyboardButton("–ë–µ–∑–ª–∞–∫—Ç–æ–∑–Ω—ã–πüç∞")
        # go_to_main_menu = types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìö")
        # new_visit_markup.add(vegetarian_recipe_button, nongluten_recipe_button,
        #                       nonlactose_recipe_button).row(rand_recipe_button).row(go_to_main_menu)
        # await bot.send_message(message.chat.id,
        #                        f"–í—ã–±–µ—Ä–µ—Ç–µ —Å–∞–ª–æ–Ω",
        #                        reply_markup=new_visit_markup)
        # await RegStates.new_visit.set()


@dp.message_handler(state=RegStates.new_visit)
async def new_visit(message: types.Message):
    main_menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    sign_for_visit = types.KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—èüßæ")
    pers_cab_button = types.KeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüë§")
    main_menu_markup.add(sign_for_visit, pers_cab_button)
    if message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìö":
        await bot.send_message(message.chat.id,
                         f"–•–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –µ—â–µ –∫—Ä–∞—Å–∏–≤–µ–µ?",
                         reply_markup=main_menu_markup)
        await RegStates.main_menu.set()

    # if message.text == "–í —Å–∞–ª–æ–Ωüè†":



    # "–í —Å–∞–ª–æ–Ωüè†"),
    # types.KeyboardButton("–ù–∞ –¥–∞—Ç—ÉüìÖ"),
    # types.KeyboardButton("–ö –º–∞—Å—Ç–µ—Ä—Éüôã"


    # global like_dislike_markup
    # like_dislike_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # like_button = types.KeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å‚ù§")
    # dislike_button = types.KeyboardButton("–ë–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—åüëé")
    # go_to_main_menu = types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìö")
    # like_dislike_markup.row(like_button, dislike_button).add(go_to_main_menu)
    # if message.text == "–õ—é–±–æ–πüçΩ":
    #     global rand_dish
    #     rand_dish = Dish.objects.order_by('?').first()
    #     user_dish = UserDish.objects.filter(dish=rand_dish, user=message.from_user.id, disliked=True).first()
    #     if user_dish is not None:
    #         rand_dish = Dish.objects.order_by('?').first()
    #     dish_ingredients = DishProduct.objects.filter(dish=rand_dish)
    #     dish_steps = DishStep.objects.all().filter(dish=rand_dish)
    #     await bot.send_message(message.chat.id,
    #                            f"–í–æ—Ç –≤–∞—à–µ –±–ª—é–¥–æ:\n"
    #                            f"{rand_dish.title}\n",
    #                            reply_markup=like_dislike_markup)
    #     with open(pic_download(rand_dish.picture), 'rb') as file:
    #         await bot.send_photo(message.chat.id,
    #                              file)
    #     if rand_dish.description is not None:
    #         await bot.send_message(message.chat.id,
    #                             f"{rand_dish.description}")
    #
    #     await bot.send_message(message.chat.id,
    #                            f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:")
    #
    #     for dish_ingredient in dish_ingredients:
    #         await bot.send_message(message.chat.id,
    #                                f"{dish_ingredient.product}{dish_ingredient.amount}\n")
    #
    #     await bot.send_message(message.chat.id,
    #                            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é:")
    #     for dish_step in dish_steps:
    #         if dish_step.picture:
    #             await bot.send_message(message.chat.id,
    #                                    f"{dish_step.order}. {dish_step.description}")
    #             with open(pic_download(dish_step.picture), 'rb') as file:
    #                 await bot.send_photo(message.chat.id,
    #                                      file)
    #         else:
    #             await bot.send_message(message.chat.id,
    #                                    f"{dish_step.order}. {dish_step.description}")
    #     await reg_states.rand_new_recipe.set()
    #
    # if message.text == "–ë–µ–∑–≥–ª—é—Ç–µ–Ω–æ–≤—ã–πüç™":
    #     tag = 3
    #     await show_recipe(message, tag)
    #
    # if message.text == "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–πü•ó":
    #     tag = 2
    #     await show_recipe(message, tag)
    #
    # if message.text == "–ë–µ–∑–ª–∞–∫—Ç–æ–∑–Ω—ã–πüç∞":
    #     tag = 1
    #     await show_recipe(message, tag)



def get_or_create_eventloop():
    try:
        return asyncio.get_event_loop()
    except RuntimeError as ex:
        if "There is no current event loop in thread" in str(ex):
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            return asyncio.get_event_loop()


def main():
    print("–ë–æ—Ç –ó–∞–ø—É—â–µ–Ω")
    loop = get_or_create_eventloop()
    executor.start_polling(dp, loop=loop)


if __name__ == "__main__":
    main()
